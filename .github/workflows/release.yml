name: Release

on:
  push:
    branches: [master]
    tags: ['v*']

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
      - name: Build
        run: |
          pyinstaller --onefile --name bb_sync_${{ matrix.os }} bb_sync.py
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bb_sync_${{ matrix.os }}
          path: dist/*

  publish:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist_all

      - name: Zip artifacts
        run: |
          cd dist_all
          zip -r ../release_assets.zip . || true

      - name: Determine release tag
        id: get_tag
        run: |
          python - <<'PY'
          import re, os
          from datetime import datetime
          tag = ''
          try:
              txt = open('pyproject.toml', 'r', encoding='utf-8').read()
              m = re.search(r'(?m)^[ \t]*version[ \t]*=[ \t]*["\']([^"\']+)["\']', txt)
              if m:
                  tag = 'v' + m.group(1)
          except Exception:
              tag = ''
          if not tag:
              sha = os.environ.get('GITHUB_SHA', '')
              short = sha[:7] if sha else 'local'
              tag = f"v{datetime.utcnow().strftime('%Y%m%d')}-{short}"
          print(tag)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as out:
              out.write(f"tag={tag}\n")
          PY

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          # Use RELEASE_PAT secret as fallback if GITHUB_TOKEN lacks permissions
          token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          body: Automated release created from master push ${{ github.sha }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_assets.zip
          asset_name: release_assets.zip
          asset_content_type: application/zip

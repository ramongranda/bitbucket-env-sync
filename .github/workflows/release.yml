name: Release

on:
  push:
    tags: ['v*']         # dispara solo en tags vX.Y.Z
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build
        shell: bash
        run: |
          pyinstaller --onefile --name bb_sync_${{ runner.os }} bb_sync.py
          echo "Built:"
          ls -la dist || dir dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bb_sync_${{ runner.os }}
          path: dist/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Determine tag
        id: tag
        run: |
          # Si viene por tag, Ãºsalo; si no, intenta leer de pyproject.toml
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            python - <<'PY'
          import re, sys, pathlib
          tag = None
          p = pathlib.Path('pyproject.toml')
          if p.exists():
              m = re.search(r'(?m)^\s*version\s*=\s*["\']([^"\']+)["\']', p.read_text(encoding='utf-8'))
              if m: tag = 'v'+m.group(1)
          print(f"tag={tag or 'v0.0.0-dev'}")
          open(os.environ['GITHUB_OUTPUT'],'a').write(f"tag={tag or 'v0.0.0-dev'}\n")
          PY
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist_all
          merge-multiple: true

      - name: Zip artifacts
        run: |
          cd dist_all
          zip -r ../release_assets.zip . 
          cd ..
          ls -la

      - name: Install GitHub CLI
        uses: cli/cli@v2
        with:
          version: latest

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          # crea o actualiza
          gh release view "$TAG" >/dev/null 2>&1 || gh release create "$TAG" -t "Release $TAG" -n "Automated release for $TAG"
          gh release upload "$TAG" release_assets.zip --clobber

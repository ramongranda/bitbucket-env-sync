name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build (Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          pyinstaller --onefile --name bb_sync bb_sync.py
          echo "Built:";
          ls -la dist || true

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pyinstaller --onefile --name bb_sync bb_sync.py
          Write-Host 'Built:'
          Get-ChildItem -Path dist

      - name: Rename binary (Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mv dist/bb_sync dist/bb_sync_Linux || true
          ls -l dist || true

      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path dist\bb_sync.exe) { Move-Item -Path dist\bb_sync.exe -Destination dist\bb_sync_Windows.exe -Force }
          Get-ChildItem -Path dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bb_sync_${{ matrix.os }}
          path: dist/*

  release:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Determine release tag
        id: get_tag
        run: |
          python - <<'PY'
          import os, re
          from datetime import datetime
          ref = os.environ.get('GITHUB_REF','')
          tag = ''
          if ref.startswith('refs/tags/'):
              tag = ref.split('/')[-1]
          else:
              try:
                  txt = open('pyproject.toml','r',encoding='utf-8').read()
                  m = re.search(r'(?m)^\s*version\s*=\s*["\']([^"\']+)["\']', txt)
                  if m:
                      tag = 'v'+m.group(1)
              except Exception:
                  pass
          if not tag:
              sha = os.environ.get('GITHUB_SHA','')
              short = sha[:7] if sha else 'local'
              tag = f"v{datetime.utcnow().strftime('%Y%m%d')}-{short}"
          print(tag)
          with open(os.environ['GITHUB_OUTPUT'],'a') as out:
              out.write(f"tag={tag}\n")
          PY

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist_all
          merge-multiple: true

      - name: List artifacts
        run: |
          echo "Contents of dist_all:"; ls -la dist_all || true

      - name: Create or get release (github-script)
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const tag = process.env.TAG || '${{ steps.get_tag.outputs.tag }}'
            const repo = context.repo
            try {
              let rel
              try {
                rel = await github.rest.repos.getReleaseByTag({ owner: repo.owner, repo: repo.repo, tag })
              } catch (e) {
                rel = await github.rest.repos.createRelease({ owner: repo.owner, repo: repo.repo, tag_name: tag, name: `Release ${tag}`, body: `Automated release for ${tag}` })
              }
              return rel.data.id
            } catch (e) {
              throw new Error(e.message)
            }
        env:
          TAG: ${{ steps.get_tag.outputs.tag }}

      - name: Upload artifacts via github-script
        id: upload_assets
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs')
            const path = require('path')
            const repo = context.repo
            const relId = parseInt(process.env.RELEASE_ID || '${{ steps.create_release.outputs.result }}', 10)
            const dir = path.join(process.cwd(), 'dist_all')
            if (!fs.existsSync(dir)) throw new Error('dist_all not found')
            const files = fs.readdirSync(dir)
            for (const f of files) {
              const full = path.join(dir, f)
              if (!fs.statSync(full).isFile()) continue
              const data = fs.readFileSync(full)
              console.log('Uploading', f)
              await github.rest.repos.uploadReleaseAsset({
                owner: repo.owner,
                repo: repo.repo,
                release_id: relId,
                name: f,
                data,
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': data.length
                }
              })
            }
        env:
          RELEASE_ID: ${{ steps.create_release.outputs.result }}

